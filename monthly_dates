#!/usr/bin/python3
#+
# This script calculates dates for regular monthly meetings of the form
# “nth <weekday> of every month”, e.g. “4th Monday of every month”, optionally
# taking into account New Zealand public holidays. Invoke this script as follows:
#
#     monthly_dates [--holiday=adj] n weekday year
#
# where n is in [1 .. 4] or [-1 .. -4] indicating the week of the month (negative
# numbers counting back from the end of the month), weekday is a 3-letter weekday
# abbreviation, and year is the year number for which to calculate the dates.
# The script will write the list of suitable dates, one to a line, to standard output.
# If --holiday=adj is specified, then adj is an integer number of days (can be positive
# or negative); any date that collides with a public holiday will be moved by
# this number of days. This option can be specified multiple times; each adjustment
# will be tried in turn until a satisfactory one can be found.
#
# For example, the command
#
#     monthly_dates --holiday=-7 4 mon 2015
#
# will show the suitable dates for meetings on the 4th Monday of every month during
# 2015. Where a date falls on a holiday, the 3rd Monday will be shown instead.
#
# Copyright 2015 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under Creative Commons CC0 <https://creativecommons.org/publicdomain/zero/1.0/>.
#-

import enum
import sys
import datetime
import getopt

#+
# Useful stuff
#-

@enum.unique
class DAY(enum.IntEnum) :
    "days of the week."
    SUN = 0
    MON = 1
    TUE = 2
    WED = 3
    THU = 4
    FRI = 5
    SAT = 6

    @classmethod
    def parse(celf, name) :
        "converts a 3-letter abbreviation to the corresponding enum instance."
        return \
            celf[name[0:3].upper()]
    #end parse

    def is_weekend(self) :
        return \
            self in (DAY.SAT, DAY.SUN)
    #end is_weekend

#end DAY

class MonthlyRule :
    "expresses and evaluates a rule of the form <n>th <weekday> of the month."

    def __init__(self, n, weekday) :
        self.n = int(n)
        assert 0 < self.n <= 4 or 0 > self.n >= -4, "n must be in [1 .. 4] or [-1 .. -4]"
        assert isinstance(weekday, DAY)
        self.weekday = weekday.value
    #end __init__

    def evaluate(self, year, month) :
        "returns the date that matches the rule for the specified year and month."
        month_start = datetime.date(year, month, 1)
        if self.n > 0 :
            start_weekday = month_start.isoweekday() % 7
            earliest_day = 1 + (self.weekday + 7 - start_weekday) % 7
            day = earliest_day + 7 * (self.n - 1)
        else :
            month_end = \
                (
                    (
                        month_start
                    +
                        datetime.timedelta(days = 31) # guaranteed to step into following month
                    ).replace(day = 1) # ensure at start of month
                -
                    datetime.timedelta(days = 1) # step back to end of original month
                )
            end_weekday = month_end.isoweekday() % 7
            latest_day = month_end.day - (end_weekday + 7 - self.weekday) % 7
            day = latest_day + 7 * (self.n + 1)
        #end if
        return \
            datetime.date(year, month, day)
    #end evaluate

#end MonthlyRule

class YearlyRule :
    "expresses and evaluates a rule of the form <n>th <weekday> of <month>."

    def __init__(self, n, weekday, month) :
        self.month = int(month)
        self._rule = MonthlyRule(n, weekday)
    #end __init__

    def evaluate(self, year) :
        "returns the date that matches the rule for the specified year."
        return \
            self._rule.evaluate(year, self.month)
    #end evaluate

#end YearlyRule

#+
# Holiday dates, taken from
# <http://www.dol.govt.nz/er/holidaysandleave/publicholidays/publicholidaydates/>
#-

valid_years = {2014, 2015, 2016} # can fill in more later
holidays = \
    [
        {
            "description" : "Good Friday",
            "dates" :
                { # needs to be updated for valid_years
                    2014 : datetime.date(2014, 4, 18),
                    2015 : datetime.date(2015, 4, 4),
                    2016 : datetime.date(2016, 3, 25),
                },
            "to_monday" : False, # actually irrelevant
        },
        {
            "description" : "Easter Monday",
            "dates" :
                { # needs to be updated for valid_years
                    2014 : datetime.date(2014, 4, 21),
                    2015 : datetime.date(2015, 4, 7),
                    2016 : datetime.date(2016, 3, 28),
                },
            "to_monday" : False, # actually irrelevant
        },
        {
            "description" : "Queen’s Birthday",
            "rule" :  YearlyRule(1, DAY.MON, 6),
            "to_monday" : False, # actually irrelevant
        },
        {
            "description" : "Labour Day",
            "rule" :  YearlyRule(4, DAY.MON, 10),
            "to_monday" : False, # actually irrelevant
        },
        {
            "description" : "Auckland Anniversary",
            "dates" :
                {
                    2014 : datetime.date(2014, 1, 27),
                    2015 : datetime.date(2015, 1, 26),
                    2016 : datetime.date(2016, 2, 1),
                },
              # todo: general algorithm for dates, can be quite complex for different regions
            "to_monday" : True, # relevant if/when I generalize the dates
        },
        # todo: other region anniversaries
    ]
def fill_in_holidays() :
    # completes the more dynamic aspects of the holidays table.
    for holiday in holidays :
        if "rule" in holiday :
            rule = holiday["rule"]
            assert isinstance(rule, YearlyRule)
            holiday["dates"] = dict((year, rule.evaluate(year)) for year in valid_years)
        else :
            for year in valid_years :
                if year not in holiday["dates"] :
                    raise AssertionError("missing year %d for %s" % (year, holiday["description"]))
                #end if
            #end if
        #end if
    #end for
    for description, month, day, to_monday in \
        (
            ("New Year’s Day", 1, 1, True),
            ("Day After New Year’s Day", 1, 2, True),
            ("Waitangi Day", 2, 6, True), # note: not Mondayized before 2014
            ("ANZAC Day", 4, 25, True), # note: not Mondayized before 2014
            ("Christmas Day", 12, 25, True),
            ("Boxing Day", 12, 26, True),
        ) \
    :
        holidays.append \
          (
            {
                "description" : description,
                "to_monday" : to_monday,
                "dates" : dict((year, datetime.date(year, month, day)) for year in valid_years),
            }
          )
    #end for
#end fill_in_holidays
fill_in_holidays()
del fill_in_holidays

def get_holidays(year) :
    "returns the actual holiday dates for the specified year."
    assert year in valid_years
    candidates = set()
    to_monday = set()
    for holiday in holidays :
        date = holiday["dates"][year]
        candidates.add(date)
        if holiday["to_monday"] :
            to_monday.add(date)
        #end if
    #end for
    result = set()
    for date in candidates :
        if date in to_monday :
            day = DAY(date.isoweekday() % 7)
            # orig_date = date # debug
            if day.is_weekend() :
                date += datetime.timedelta(days = (DAY.MON.value + 7 - day.value) % 7)
                if date in result :
                    date += datetime.timedelta(days = 1)
                #end if
                # sys.stderr.write("mondayize holiday %s %s => %s\n" % (day.name, repr(orig_date), repr(date))) # debug
            #end if
        #end if
        result.add(date)
    #end for
    return \
        result
#end get_holidays

#+
# Mainline
#-

def mainline() :
    opts, args = getopt.getopt \
      (
        sys.argv[1:],
        "",
        ["holiday="]
      )
    if len(args) != 3 :
        raise ValueError("need exactly 3 args: n weekday year")
    #end if
    holiday_adjust = []
    for keyword, value in opts :
        if keyword == "--holiday" :
            value = int(value)
            if value == 0 :
                raise ValueError("value for %s cannot be zero" % keyword)
            #end if
            holiday_adjust.append(value)
        #end if
    #end for
    n = int(args[0])
    weekday = DAY.parse(args[1])
    year = int(args[2])
    rule = MonthlyRule(n, weekday)
    assert year in valid_years, "I can only handle years %s" % ", ".join("%d" % year for year in valid_years)
    actual_holidays = get_holidays(year)
    for month in range(0, 12) :
        month += 1
        candidate = rule.evaluate(year, month)
        status = ""
        if len(holiday_adjust) != 0 and candidate in actual_holidays :
            adjusts = iter(holiday_adjust)
            while True :
                adjust = next(adjusts, None)
                if adjust == None :
                    status = " (CANNOT MOVE)"
                    break
                #end if
                new_candidate = candidate + datetime.timedelta(days = adjust)
                if new_candidate.month == month and new_candidate not in actual_holidays :
                    candidate = new_candidate
                    status = " (moved %+d)" % adjust
                    break
                #end if
            #end while
        #end if
        sys.stdout.write(candidate.strftime("%a %Y-%m-%d") + status + "\n")
    #end for
#end mainline

if __name__ == "__main__" :
    mainline()
#end if
